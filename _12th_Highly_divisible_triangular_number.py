# -*- coding: utf-8 -*-
import logging

import numpy as np

logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s - [%(levelname)s] : %(message)s')

"""
Highly divisible triangular number

Problem 12
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

# 计算一个数字有多少个除数
def countDivisors(number):
    count = 0
    if number == 1:
        return 1
    for i in range(1, int(np.sqrt(number)) + 1):
        if number % i == 0 and number / i == i:
            count += 1
        elif number % i == 0:
            count += 2
    return count


n = 0 # 起始数字为0
i = 0 # 起始增量为0
count = 0 # 起始除数数量为0
while count < 500: # 除数个数小于500
    i += 1 # 增量加1
    n += i # 被除数加上增量
    count = countDivisors(n) # 计算被除数的除数个数

logging.debug(n)